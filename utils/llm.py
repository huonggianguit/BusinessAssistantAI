import os
import httpx

def gen_insights(metrics: dict):
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        return "‚ö†Ô∏è Missing GEMINI_API_KEY in .env"

    model = "gemini-2.0-flash"  # ho·∫∑c "gemini-2.5-flash" n·∫øu t√†i kho·∫£n c√≥ quy·ªÅn
    url = f"https://generativelanguage.googleapis.com/v1/models/{model}:generateContent?key={api_key}"

    prompt = (
        "Ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng sau v√† t·∫°o **b√°o c√°o d·∫°ng d·ªÖ ƒë·ªçc**, chia 3 ph·∫ßn r√µ r√†ng:\n"
        "1Ô∏è‚É£ Ph√¢n t√≠ch t·ªïng quan\n"
        "2Ô∏è‚É£ Insight ch√≠nh\n"
        "3Ô∏è‚É£ G·ª£i √Ω khuy·∫øn m√£i\n\n"
        "H√£y d√πng emoji, chia d√≤ng ng·∫Øn, th√™m ti√™u ƒë·ªÅ ph·ª•, tr√¨nh b√†y g·ªçn g√†ng nh∆∞ v√≠ d·ª• sau:\n\n"
        "üßæ B√ÅO C√ÅO PH√ÇN T√çCH D·ªÆ LI·ªÜU B√ÅN H√ÄNG\n"
        "1Ô∏è‚É£ Ph√¢n t√≠ch d·ªØ li·ªáu t·ªïng quan\n"
        "- T·ªïng doanh thu: ...\n"
        "- Xu h∆∞·ªõng: ...\n\n"
        "2Ô∏è‚É£ Insight ch√≠nh\n"
        "üí° 1. ...\nüí° 2. ...\n\n"
        "3Ô∏è‚É£ G·ª£i √Ω khuy·∫øn m√£i\n"
        "üéØ 1. ...\nüéØ 2. ...\n\n"
        "H√£y tr√¨nh b√†y th·∫≠t s·∫°ch ƒë·∫πp, d·ªÖ ƒë·ªçc, kh√¥ng d√πng Markdown ph·ª©c t·∫°p.\n\n"
        f"D·ªØ li·ªáu ƒë·∫ßu v√†o:\n{metrics}"
    )

    headers = {"Content-Type": "application/json"}
    body = {"contents": [{"role": "user", "parts": [{"text": prompt}]}]}

    try:
        resp = httpx.post(url, headers=headers, json=body, timeout=90)
        data = resp.json()

        if "candidates" not in data:
            err = data.get("error", {}).get("message", "Unknown LLM error")
            return f"‚ö†Ô∏è Gemini API error: {err}"

        text = data["candidates"][0]["content"]["parts"][0].get("text", "").strip()
        if not text:
            return "‚ö†Ô∏è Gemini API returned empty response"

        cleaned = (
            text.replace("##", "")
            .replace("**", "")
            .replace("* ", "")
            .replace("\n\n\n", "\n\n")
            .strip()
        )
        cleaned = cleaned.replace("1Ô∏è‚É£", "\n\n1Ô∏è‚É£").replace("2Ô∏è‚É£", "\n\n2Ô∏è‚É£").replace("3Ô∏è‚É£", "\n\n3Ô∏è‚É£")

        formatted = f"üßæ B√ÅO C√ÅO PH√ÇN T√çCH D·ªÆ LI·ªÜU B√ÅN H√ÄNG\n\n{cleaned}"
        return formatted

    except Exception as e:
        return f"‚ö†Ô∏è Request failed: {e}"
